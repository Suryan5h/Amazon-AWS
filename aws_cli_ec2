************    STEP-1     ***************
# EC2 Commands
# Creating a VPC
aws ec2 create-vpc --cidr-block 10.0.0.0/16

# VPC Details
aws ec2 describe-vpcs --vpc-ids vpc_ID_from_above_command

# Creating subnet 1
aws ec2 create-subnet --vpc-id vpc_ID_from_above_command --cidr-block 10.0.1.0/24

# Copy the subnet ID for subnet 1 from here

# Creating subnet 2
aws ec2 create-subnet --vpc-id vpc_ID_from_above_command --cidr-block 10.0.2.0/24

# Copy the subnet ID for subnet 2 from here

# Subnet 1 Details
aws ec2 describe-subnets --subnet-ids subnet_1_ID_copied_from_above

CIDR Blocks
Classless Inter Domain Routing

10.0.1.0/26 means
32 - 26 = 6 bits we can change (last 6 bits)
So , 2^6 = 64 IP Addresses in this range
So Ip addresses - 10.0.1.0 - 10.0.1.63


**********          STEP2          ************
# Creating internet gateway
aws ec2 create-internet-gateway

# Copy the Internet Gateway ID from here

# Attaching the internet gateway with the VPC created before
aws ec2 attach-internet-gateway --vpc-id vpc_ID --internet-gateway-id internet_gateway_ID

# Create Route table
aws ec2 create-route-table --vpc-id vpc_ID

# Copy the Route table ID from here

# Attaching the route table to the internet gateway
aws ec2 create-route --route-table-id route_table_ID --destination-cidr-block 0.0.0.0/0 --gateway-id internet_gateway_ID

# Attaching the route table with the subnet 1
aws ec2 associate-route-table --subnet-id subnet_1_ID --route-table-id route_table_ID

# Code to map a public IP to the instance on launch
aws ec2 modify-subnet-attribute --subnet-id subnet_1_ID --map-public-ip-on-launch


********** STEP 3   *****************
# EC2 Commands
# Creating key pair
aws ec2 create-key-pair --key-name keypair1 --output text --query "KeyMaterial"> keypair1.pem

# Opening the .pem file (Windows)
# Open using the 'Notepad' application

# Opening the .pem file (Linux/Mac)
vi keypair1.pem

# Changing the permission to read only (Linux/Mac)
chmod 400 keypair1.pem

# Creating Security Group
aws ec2 create-security-group --group-name test_group --description "Security group for demo" --vpc-id vpc_ID

# Copy Security Group ID as it will be helpful later

# Adding rule to your security group to permit access from your laptop - Ports 22 and 8888
aws ec2 authorize-security-group-ingress --group-id security_group_id_from_above --protocol tcp --port 22 --cidr your_public_ip
aws ec2 authorize-security-group-ingress --group-id security_group_id_from_above --protocol tcp --port 8888 --cidr your_public_ip

# Initiating an ec2 instance
aws ec2 run-instances --image-id correct_AMI_ID_from_document --count 1 --instance-type t2.micro --key-name keypair1 --security-group-ids security_group_id_from_above --subnet-id subnet_1_ID

# Copy ths instance ID from above

# Describing the details of the instance
aws ec2 describe-instances --instance-id Instance_ID_from_above

# Logging into the instance in a LINUX/Mac environment
ssh -i keypair1.pem ec2-user@EC2_instance_public_IP

# Starting an existing instance
aws ec2 start-instances --instance-ids Instance_ID

# EC2 Instance
# Creating an instance profile to attach the role to the instance
aws iam create-instance-profile --instance-profile-name instanceprofile1

# Attaching the created role to the instance profile
aws iam add-role-to-instance-profile --role-name role1 --instance-profile-name instanceprofile1

# Attaching the instance profile to the instance
aws ec2 associate-iam-instance-profile --instance-id Instance_ID --iam-instance-profile Name=instanceprofile1

# Stopping the instance
aws ec2 stop-instances --instance-ids Instance_ID
